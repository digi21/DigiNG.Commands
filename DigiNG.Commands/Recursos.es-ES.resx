<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CopiarAtributosBBDDName" xml:space="preserve">
    <value>copiar_atributos_bbdd</value>
  </data>
  <data name="CopiarNombreCódigoName" xml:space="preserve">
    <value>copiar_nombre_codigo</value>
  </data>
  <data name="CopiarTablaRegistroName" xml:space="preserve">
    <value>copiar_tabla_registro</value>
  </data>
  <data name="CortarName" xml:space="preserve">
    <value>cortar</value>
  </data>
  <data name="CortarPoligonoName" xml:space="preserve">
    <value>cortar_poligono</value>
  </data>
  <data name="DetectaLíneasPerímetroInferiorAValorName" xml:space="preserve">
    <value>detectar_lineas_perimetro_inferior</value>
  </data>
  <data name="DetectarUndershootName" xml:space="preserve">
    <value>detectar_undershoot</value>
  </data>
  <data name="HasSeleccionadoUnaEntidadConMasDeUnCodigoEstaOrdenNoEstaPreparada" xml:space="preserve">
    <value>Has seleccionado una entidad con más de un código. Esta orden aún no está preparada para este escenario.</value>
  </data>
  <data name="LaEntidadOrigenYDestinoNoTienenCódigosComunes" xml:space="preserve">
    <value>Las entidades origen y destino no tienen códigos comunes</value>
  </data>
  <data name="LaEntidadQueHasSeleccionadoNoTieneNingúnEnlaceDeBaseDatos" xml:space="preserve">
    <value>La entidad que has seleccionado no tiene ningún enlace de base de datos.</value>
  </data>
  <data name="LineaAPolígonoDescription" xml:space="preserve">
    <value>Transforma líneas en polígonos. Es necesario introducir como parámetros los códigos de las líneas (cerradas) a transformar en polígono. Se pueden poner varios parámetros y además se admiten comodines.</value>
  </data>
  <data name="LineaAPolígonoName" xml:space="preserve">
    <value>linea_a_poligono</value>
  </data>
  <data name="LineaXConPerímetroYInferiorAZ" xml:space="preserve">
    <value>Línea ({0}) con perímetro: {1} inferior a {2}</value>
  </data>
  <data name="LocalizadoUndershootEnLaLíneaConCódigoX" xml:space="preserve">
    <value>Localizado undershoot en la línea con código {0}</value>
  </data>
  <data name="LosCódigosDeLasEntidadesSonDistintosYPoLoTantoNoSePuedenUnir" xml:space="preserve">
    <value>Los códigos de las entidades son distintos, por lo tanto no se pueden unir</value>
  </data>
  <data name="MagnitudX" xml:space="preserve">
    <value>Magnitud {0}</value>
  </data>
  <data name="NoHaIndicadoLosCódigosDeLasLíneasAConvertirEnPolígono" xml:space="preserve">
    <value>No ha indicado los códigos de las líneas a convertir a polígono</value>
  </data>
  <data name="PartirPoligonosName" xml:space="preserve">
    <value>partir_poligonos</value>
  </data>
  <data name="RecortarPoligonoName" xml:space="preserve">
    <value>recortar_poligono</value>
  </data>
  <data name="RecortarPoligonosName" xml:space="preserve">
    <value>recortar_poligonos</value>
  </data>
  <data name="SeleccionaElPoligonoACortar" xml:space="preserve">
    <value>Selecciona el polígono a cortar</value>
  </data>
  <data name="SeleccionaElPolígonoARecortar" xml:space="preserve">
    <value>Selecciona el polígono a recortar</value>
  </data>
  <data name="SeleccionaElPrimerPolígnoAUnir" xml:space="preserve">
    <value>Selecciona el primer polígono a unir</value>
  </data>
  <data name="SeleccionaElSegundoPolígonoAUnir" xml:space="preserve">
    <value>Selecciona el segundo polígono a unir</value>
  </data>
  <data name="SeleccionaLaEntidadDestino" xml:space="preserve">
    <value>Selecciona la entidad destino...</value>
  </data>
  <data name="SeleccionaLaEntidadOrigen" xml:space="preserve">
    <value>Selecciona la entidad origen...</value>
  </data>
  <data name="SeleccionaLaLíneaDeCorte" xml:space="preserve">
    <value>Selecciona la línea de corte</value>
  </data>
  <data name="SeleccionaLaLíneaLímite" xml:space="preserve">
    <value>Selecciona la línea de límite</value>
  </data>
  <data name="SeleccionaLíneaATramificar" xml:space="preserve">
    <value>Selecciona la línea a tramificar</value>
  </data>
  <data name="SePartieronXEntidadesYSeFormaronYEntidadesNuevas" xml:space="preserve">
    <value>Se partieron {0} entidades y se formaron {1} entidades nuevas</value>
  </data>
  <data name="TramificaInsertandoEntidadSeleccionadaName" xml:space="preserve">
    <value>tram_inserta_vertices_entidad_sel</value>
  </data>
  <data name="UnirPolígonosName" xml:space="preserve">
    <value>unir_poligonos</value>
  </data>
  <data name="CambCodManteniendoAtributosName" xml:space="preserve">
    <value>camb_cod_manteniendo_atributos</value>
  </data>
  <data name="CambCodManteniendoAtributosName1" xml:space="preserve">
    <value>camb_cod_manteniendo_atributos</value>
  </data>
  <data name="CambCodManteniendoAtributosTitle" xml:space="preserve">
    <value>Cambia código manteniendo atributos</value>
  </data>
  <data name="CopiarAtributosBBDDTitle" xml:space="preserve">
    <value>Copiar atributos de bbdd</value>
  </data>
  <data name="CopiarNombreCódigoTitle" xml:space="preserve">
    <value>Copiar nombre de código manteniendo atributos</value>
  </data>
  <data name="CopiarTablaRegistroTitle" xml:space="preserve">
    <value>Copiar tabla/registro de código manteniendo nombre</value>
  </data>
  <data name="CortarPoligonoTitle" xml:space="preserve">
    <value>Cortar polígono</value>
  </data>
  <data name="CortarTitle" xml:space="preserve">
    <value>Cortar</value>
  </data>
  <data name="PartirPoligonosTitle" xml:space="preserve">
    <value>Partir polígonos</value>
  </data>
  <data name="RecortarPoligonosTitle" xml:space="preserve">
    <value>Recortar polígonos</value>
  </data>
  <data name="RecortarPoligonoTitle" xml:space="preserve">
    <value>Recortar polígono</value>
  </data>
  <data name="TramificaInsertandoEntidadSeleccionadaTitle" xml:space="preserve">
    <value>Insertar vértices en las intersecciones de la línea seleccionada</value>
  </data>
  <data name="UnirPolígonosTitle" xml:space="preserve">
    <value>Unir polígonos</value>
  </data>
  <data name="SustituirAtributosBBDDName" xml:space="preserve">
    <value>sustituye_atributos_bbdd</value>
  </data>
  <data name="SustituirAtributosBBDDTitle" xml:space="preserve">
    <value>Sustituir atributos de base de datos</value>
  </data>
  <data name="DebesEspecificarElNombreDeLosCamposASustituir" xml:space="preserve">
    <value>Debes especificar mediante parámetros los nombres de los campos a sustituir</value>
  </data>
</root>